<?php

/**
 * @file
 * Defines a Domain concept for use with Drupal.
 */

use Drupal\Core\Url;
use Drupal\domain\DomainInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * The name of the node access control field.
 */
const DOMAIN_ADMIN_FIELD = 'field_domain_admin';

/**
 * Implements hook_entity_bundle_info().
 */
function domain_entity_bundle_info() {
  $bundles['domain']['domain'] = array(
    'label' => t('Domain record'),
    'admin' => array(
      'real path' => 'admin/config/domain',
    ),
  );
  return $bundles;
}

/**
 * Entity URI callback.
 *
 * @param \Drupal\domain\DomainInterface $domain
 *   The Domain object.
 *
 * @return \Drupal\Core\Url
 *   The Domain URL.
 */
function domain_uri(DomainInterface $domain) {
  return Url::fromUri($domain->getPath(), ['absolute' => TRUE]);
}

/**
 * Implements hook_entity_load().
 *
 * The $domain->path and $domain->uri properties are derived from data in the
 * {domain} table. We use the hook system to load that data to indicate that
 * the data is not native to the object.
 *
 * This action is performed in hook_entity_load(), which precedes the running
 * of hook_domain_load() and ensures that our data is present for other modules.
 */
function domain_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'domain') {
    foreach ($entities as $domain) {
      $domain->setPath();
      $domain->setUrl();
    }
  }
}

/**
 * Implements hook_help().
 */
function domain_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'domain.admin':
      $output = t('<p>The following domains have been created for your site.  The currently active domain
                     <strong>is shown in boldface</strong>. You may click on a domain to change the currently active domain.
                     </p>');
      return $output;
  }
}

/**
 * Implements hook_token_info().
 */
function domain_token_info() {
  return \Drupal::service('domain.token')->getTokenInfo();
}

/**
 * Implements hook_tokens().
 */
function domain_tokens($type, $tokens, array $data, array $options, \Drupal\Core\Render\BubbleableMetadata $bubbleable_metadata) {
  return \Drupal::service('domain.token')->getTokens($type, $tokens, $data, $options, $bubbleable_metadata);
}


/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function domain_preprocess_html(array &$variables) {
  // Add class to body tag, if set.
  $config = \Drupal::config('domain.settings');
  if ($string = $config->get('css_classes')) {
    $token = \Drupal::token();
    // Prepare the class properly.
    $variables['attributes']['class'][] = Html::getClass($token->replace($string));
  }
}

/**
 * Creates our fields for an entity bundle.
 *
 * @param string $entity_type
 *   The entity type being created. Node and user are supported.
 * @param string $bundle
 *   The bundle being created.
 * @param string $handler
 *   The entity reference form widget to use. Defaults to 'default:domain'.
 *   See hook_domain_references_alter() for details.
 * @param array $text
 *   The text to use for the field. Keys are:
 *   'name' -- the lower-case, human-readable name of the entity.
 *   'label' -- the form label for the all affiliates field.
 *   'description' -- the help text for the all affiliates field.
 *
 *   If calling this function for entities other than user or node, it is the
 *   caller's responsibility to provide this text.
 *
 * This function is here for convenience during installation. It is not really
 * an API function. Modules wishing to add fields to non-node entities must
 * provide their own field storage. See the field storage YML sample in
 * tests/modules/domain_access_test for an example of field storage definitions.
 *
 * @TODO Update and abstract this function for use by other modules.
 */
function domain_confirm_fields($entity_type, $bundle, $handler = 'default:domain', $text = array()) {
  // We have reports that importing config causes this function to fail.
  try {

    $storage_id = $entity_type . '.' . DOMAIN_ADMIN_FIELD;
    if (!$storage = \Drupal::entityTypeManager()->getStorage('field_storage_config')->load($storage_id)) {
      $field_storage = [
        'id' => $storage_id,
        'field_name' => DOMAIN_ADMIN_FIELD,
        'type' => 'entity_reference',
        'entity_type' => 'user',
        'cardinality' => -1,
        'module' => 'entity_reference',
        'settings' => ['target_type' => 'domain'],
      ];
      $field_storage_config = FieldStorageConfig::create($field_storage);

      $field_storage_config->save();
    }

    $id = $storage_id = $entity_type . '.' . $bundle . '.' . DOMAIN_ADMIN_FIELD;
    if (!$field = \Drupal::entityTypeManager()->getStorage('field_config')->load($id)) {
      $field = array(
        'field_name' => DOMAIN_ADMIN_FIELD,
        'entity_type' => $entity_type,
        'label' => 'Domain administrator',
        'bundle' => $bundle,
        // Users should not be required to be a domain editor.
        'required' => $entity_type !== 'user',
        'description' => 'Select the domains this user may administer',
        'default_value' => [],
        'settings' => [
          'handler' => $handler,
          'handler_settings' => [
            'sort' => ['field' => 'weight', 'direction' => 'ASC'],
          ],
        ],
      );
      $field_config = \Drupal::entityTypeManager()->getStorage('field_config')->create($field);
      $field_config->save();
    }
    // Tell the form system how to behave. Default to radio buttons.
    // @TODO: This function is deprecated, but using the OO syntax is causing
    // test fails.
    entity_get_form_display($entity_type, $bundle, 'default')
      ->setComponent(DOMAIN_ADMIN_FIELD, array(
        'type' => 'options_buttons',
        'weight' => 50,
      ))
      ->save();
  }
  catch (Exception $e) {
    \Drupal::logger('domain')->notice('Field installation failed.');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\user\UserForm.
 *
 * Handle settings that the user cannot access.
 */
function domain_form_user_form_alter(&$form, &$form_state, $form_id) {
  // Add the options hidden from the user silently to the form.
  $manager = \Drupal::service('domain.element_manager');
  $form = $manager->setFormOptions($form, $form_state, DOMAIN_ADMIN_FIELD);
}

/**
 * Implements hook_domain_references_alter().
 */
function domain_domain_references_alter($query, $account, $context) {
  // Restrict domains by assignment, being sure only to act on the admin field.
  if ($context['field_type'] == 'admin' && $context['entity_type'] == 'user') {
    if ($account->hasPermission('administer domains')) {
      // Do nothing.
    }
    elseif ($account->hasPermission('assign domain administrators')) {
      $allowed = \Drupal::service('domain.element_manager')->getFieldValues($account, DOMAIN_ADMIN_FIELD);
      $query->condition('id', array_keys($allowed), 'IN');
    }
    else {
      // Remove all options.
      $query->condition('id', '-no-possible-match-');
    }
  }
}
