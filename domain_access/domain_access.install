<?php

/**
 * @file
 * Install, update and uninstall functions for the Domain Access module.
 */

/**
 * Implements hook_install().
 *
 * Installs the default domain field on nodes. We don't do this via schema.yml
 * files because we have an unknown number of node types.
 */
function domain_access_install() {
  if (\Drupal::isConfigSyncing()) {
    // Configuration is assumed to already be checked by the config importer
    // validation events.
    return;
  }
  // Assign domain access to bundles.
  $list['user'] = 'user';

  $node_types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
  foreach ($node_types as $type => $info) {
    $list[$type] = 'node';
  }
  // Install our fields.
  foreach ($list as $bundle => $entity_type) {
    domain_access_confirm_fields($entity_type, $bundle);
  }
  // Install our actions.
  $domains = \Drupal::entityTypeManager()->getStorage('domain')->loadMultiple();
  foreach ($domains as $domain) {
    domain_access_domain_insert($domain);
  }
}

/**
 * Add the setting to open the domain access fieldset.
 */
function domain_access_update_8001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('domain_access.settings');
  $config->set('node_advanced_tab_open', 0);
  $config->save(TRUE);
}

/**
 * Remove default value callback from domain access fields.
 */
function domain_access_update_8002() {
  $field_config_storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $field_configs = $field_config_storage->loadByProperties(['field_name' => DOMAIN_ACCESS_FIELD]);

  if ($field_configs) {
    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
    foreach ($field_configs as $field_config) {
      $field_config->setDefaultValueCallback(NULL);
      $field_config->setDefaultValue([]);
      $field_config->save();
      $field_ids[] = $field_config->id();
    }
  }
  return t('Removed default value callbacks from all domain_access fields: @fields', ['@fields' => implode(', ', $field_ids)]);
}

/**
 * Set "add current domain" for required domain_access fields.
 */
function domain_access_update_8003() {
  $field_config_storage = \Drupal::entityTypeManager()->getStorage('field_config');
  $field_configs = $field_config_storage->loadByProperties(['field_name' => DOMAIN_ACCESS_FIELD]);

  if ($field_configs) {
    /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
    foreach ($field_configs as $field_config) {
      if ($field_config->isRequired()) {
        $field_config->setThirdPartySetting('domain_access', 'add_current_domain', TRUE);
        $field_config->save();
        $field_ids[] = $field_config->id();
      }
    }
  }
  return t('Set "add current domain" for required domain_access fields: @fields', ['@fields' => implode(', ', $field_ids)]);
}
