<?php

/**
 * @file
 * Install, update and uninstall functions for the Domain Access module.
 */

/**
 * Implements hook_install().
 *
 * Installs the default domain field on nodes. We don't do this via schema.yml
 * files because we have an unknown number of node types.
 */
function domain_access_install() {
  if (\Drupal::isConfigSyncing()) {
    // Configuration is assumed to already be checked by the config importer
    // validation events.
    return;
  }
  // Assign domain access to bundles.
  $list['user'] = 'user';

  $node_types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
  foreach ($node_types as $type => $info) {
    $list[$type] = 'node';
  }
  // Install our fields.
  foreach ($list as $bundle => $entity_type) {
    domain_access_confirm_fields($entity_type, $bundle);
  }
  // Install our actions.
  $domains = \Drupal::entityTypeManager()->getStorage('domain')->loadMultiple();
  foreach ($domains as $domain) {
    domain_access_domain_insert($domain);
  }
}

/**
 * Add the setting to open the domain access fieldset.
 */
function domain_access_update_8001() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('domain_access.settings');
  $config->set('node_advanced_tab_open', 0);
  $config->save(TRUE);
}

/**
 * Update actions to current API.
 */
function domain_access_update_8002() {
  $config_factory = \Drupal::configFactory();
  $rename_list = [
    'domain_access_add_action',
    'domain_access_add_editor_action',
    'domain_access_remove_action',
    'domain_access_remove_editor_action'
  ];
  $update_config_list = [
    'domain_access_all_action',
    'domain_access_edit_all_action',
    'domain_access_edit_none_action',
    'domain_access_none_action',
  ];

  foreach ($config_factory->listAll() as $name) {
    $config = $config_factory->getEditable($name);
    $plugin = $config->get('plugin');
    // Save our default plugins with arrays for configuration.
    if (in_array($plugin, $update_config_list, TRUE)) {
      $config->set('configuration', []);
      $config->save(TRUE);
    }
    // Rename the items that need it.
    if (in_array($plugin, $rename_list, TRUE)) {
      $configuration = $config->get('configuration');
      // Set the domain_id to an array.
      $current = $configuration['domain_id'] ?? [];
      $new_configuration = $configuration;
      if (!is_array($current)) {
        $new_configuration['domain_id'] = [$current];
      }
      $config->set('configuration', $new_configuration);
      $config->save(TRUE);
    }
  }
}
/**
 * Update action names.
 */
function domain_access_update_8003() {
  $config_factory = \Drupal::configFactory();
  $rename_list = [
    'domain_access_add_action',
    'domain_access_add_editor_action',
    'domain_access_remove_action',
    'domain_access_remove_editor_action'
  ];

  foreach ($config_factory->listAll() as $name) {
    $config = $config_factory->getEditable($name);
    $plugin = $config->get('plugin');
    // Rename the items that need it.
    if (in_array($plugin, $rename_list, TRUE)) {
      // If the name has a period, change to underscore.
      $name = $config->getName();
      if (substr_count($name, $plugin . '.') > 0) {
        $id = $config->get('id');
        $config->set('id', str_replace('.', '_', $id));
        $new_name = str_replace($plugin . '.', $plugin . '_', $name);
        $config_factory->rename($name, $new_name);
      }
    }
  }
}
