<?php

/**
 * @file
 * Domain-based access control for content.
 */

use Drupal\domain\DomainNegotiator;
use Drupal\domain\DomainInterface;
use Drupal\node\NodeInterface;
use Drupal\node\Entity\NodeType;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;

/**
 * Defines the name of the node access control field.
 */
define('DOMAIN_ACCESS_FIELD', 'field_domain_access');

/**
 * Defines the name of the all affiliates field.
 */
define('DOMAIN_ACCESS_ALL_FIELD', 'field_domain_all_affiliates');

/**
 * Implements hook_node_grants().
 */
function domain_access_node_grants(AccountInterface $account, $op) {
  $grants = array();
  $active = \Drupal::service('domain.negotiator')->getActiveDomain();

  if (empty($active)) {
    $active = \Drupal::service('domain.loader')->loadDefaultDomain();
  }

  // No domains means no permissions.
  if (empty($active)) {
    return $grants;
  }

  $id = $active->getDomainId();
  // Advanced grants for edit/delete require permissions.
  $user = \Drupal::entityManager()->getStorage('user')->load($account->id());
  $user_domains = \Drupal::service('domain_access.manager')->getAccessValues($user);
  // Grants for view are simple. Use the active domain and all affiliates.
  // Note that "X to any domain" is a global permission designed for admins.
  if ($op == 'view') {
    $grants['domain_id'][] = $id;
    $grants['domain_site'][] = 0;
    if ($user->hasPermission('view unpublished domain content')) {
      if ($user->hasPermission('publish to any domain') || in_array($id, $user_domains) || !empty($user->get(DOMAIN_ACCESS_ALL_FIELD)->value)) {
        $grants['domain_unpublished'][] = $id;
      }
    }
  }
  elseif ($op == 'update' && $user->hasPermission('edit domain content')) {
    if ($user->hasPermission('publish to any domain') || in_array($id, $user_domains) || !empty($user->get(DOMAIN_ACCESS_ALL_FIELD)->value)) {
      $grants['domain_id'][] = $id;
    }
  }
  elseif ($op == 'delete' && $user->hasPermission('delete domain content')) {
    if ($user->hasPermission('publish to any domain') || in_array($id, $user_domains) || !empty($user->get(DOMAIN_ACCESS_ALL_FIELD)->value)) {
      $grants['domain_id'][] = $id;
    }
  }
  return $grants;
}

/**
 * Implements hook_node_access_records().
 */
function domain_access_node_access_records(NodeInterface $node) {
  $grants = array();
  // If there are no domains set, use the current one.
  $domains = \Drupal::service('domain_access.manager')->getAccessValues($node);
  if (empty($domains) && $active = \Drupal::service('domain.negotiator')->getActiveDomain()) {
    $domains[$active->id()] = $active->getDomainId();
  }
  foreach ($domains as $id => $domainId) {
    if ($domain = \Drupal::service('domain.loader')->load($id)) {
      $grants[] = array(
        'realm' => ($node->isPublished()) ? 'domain_id' : 'domain_unpublished',
        'gid' => $domain->getDomainId(),
        'grant_view' => 1,
        'grant_update' => 1,
        'grant_delete' => 1,
      );
    }
  }
  if (!empty($node->get(DOMAIN_ACCESS_ALL_FIELD)->value) && $node->isPublished()) {
    $grants[] = array(
      'realm' => 'domain_site',
      'gid' => 0,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
    );
  }
  return $grants;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Fires only if Devel Generate module is present, to assign test nodes to
 * domains.
 *
 * @param \Drupal\Core\Entity\EntityInterface stdClass $node
 *   The node entity on which the operation is to be performed.
 */
function domain_access_node_presave(EntityInterface $node) {
  domain_access_presave_generate($node);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Fires only if Devel Generate module is present, to assign test nodes to
 * domains.
 *
 * @param \Drupal\Core\Entity\EntityInterface $account
 *   The user entity on which the operation is to be performed.
 */
function domain_access_user_presave(EntityInterface $account) {
  domain_access_presave_generate($account);
}

/**
 * Handles presave operations for devel generate.
 */
function domain_access_presave_generate(EntityInterface $entity) {
  $exists = \Drupal::moduleHandler()->moduleExists('devel_generate');
  $values = [];
  if ($exists && isset($entity->devel_generate)) {
    // If set by the form.
    if (isset($entity->devel_generate['domain_access'])) {
      $selection = array_filter($entity->devel_generate['domain_access']);
      if (isset($selection['random-selection'])) {
        $domains = \Drupal::service('domain.loader')->loadMultiple();
        $values[DOMAIN_ACCESS_FIELD] = array_rand($domains, ceil(rand(1, count($domains))));
      }
      else {
        $values[DOMAIN_ACCESS_FIELD] = array_keys($selection);
      }
    }
    if (isset($entity->devel_generate['domain_all'])) {
      $selection = $entity->devel_generate['domain_all'];
      if ($selection == 'random-selection') {
        $values[DOMAIN_ACCESS_ALL_FIELD] = rand(0, 1);
      }
      else {
        $values[DOMAIN_ACCESS_ALL_FIELD] = ($selection = 'yes' ? 1 : 0);
      }
    }
    foreach ($values as $name => $value) {
      $entity->set($name, $value);
    }
  }

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add options for domains when using Devel Generate.
 */
function domain_access_form_devel_generate_form_content_alter(&$form, &$form_state, $form_id) {
  // Add our element to the devel generate form.
  $form['submit']['#weight'] = 10;
  $list = ['random-selection' => t('Random selection')];
  $list += \Drupal::service('domain.loader')->loadOptionsList();
  $form['domain_access'] = array(
    '#title' => t('Domains'),
    '#type' => 'checkboxes',
    '#options' => $list,
    '#weight' => 2,
    '#multiple' => TRUE,
    '#size' => count($list) > 5 ? 5 : count($list),
    '#default_value' => ['random-selection'],
    '#description' => t('Sets the domains for created nodes. Random selection overrides other choices.'),
  );
  $form['domain_all'] = array(
    '#title' => t('Send to all affiliates'),
    '#type' => 'radios',
    '#options' => [
      'random-selection' => t('Random selection'),
      'yes' => t('Yes'),
      'no' => t('No'),
    ],
    '#default_value' => 'random-selection',
    '#weight' => 3,
    '#description' => t('Sets visibility across all affiliates.'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add options for domains when using Devel Generate.
 */
function domain_access_form_devel_generate_form_user_alter(&$form, &$form_state, $form_id) {
  domain_access_form_devel_generate_form_content_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_domain_references_alter().
 */
function domain_access_domain_references_alter($query, $account, $context) {
  // Restrict domains by assignment.
  switch ($context['entity_type']) {
    case 'node':
      if ($account->hasPermission('publish to any domain')) {
        break;
      }
      elseif ($account->hasPermission('publish to any assigned domain')) {
        if (!empty($account->get(DOMAIN_ACCESS_ALL_FIELD)->value)) {
          break;
        }
        $allowed = \Drupal::service('domain_access.manager')->getAccessValues($account);
        $query->condition('id', array_keys($allowed), 'IN');
      }
      else {
        // Remove all options.
        $query->condition('id', '-no-possible-match-');
      }
      break;
    case 'user':
      if ($account->hasPermission('assign editors to any domain')) {
        // Do nothing.
      }
      elseif ($account->hasPermission('assign domain editors')) {
        if (!empty($account->get(DOMAIN_ACCESS_ALL_FIELD)->value)) {
          break;
        }
        $allowed = \Drupal::service('domain_access.manager')->getAccessValues($account);
        $query->condition('id', array_keys($allowed), 'IN');
      }
      else {
        // Remove all options.
        $query->condition('id', '-no-possible-match-');
      }
      break;
    default:
      // No action taken.
      break;
  }
}

/**
 * Implements hook_node_access().
 */
function domain_access_node_access(NodeInterface $node, $op, AccountInterface $account) {
  static $active_domain;
  if (!isset($active_domain)) {
    // Ensure that the loader has run. In some tests, the kernel event has not.
    $active = \Drupal::service('domain.negotiator')->getActiveDomain();
    if (empty($active)) {
      $active = \Drupal::service('domain.negotiator')->getActiveDomain(TRUE);
    }
    $active_domain = $active;
  }
  // Check to see that we have a valid active domain.
  // Without one, we cannot assert an opinion about access.
  if (empty($active_domain->getDomainId())) {
    return AccessResult::neutral();
  }

  $type = $node->bundle();
  $manager = \Drupal::service('domain_access.manager');

  switch ($op) {
    case 'update':
      if ($account->hasPermission('update ' . $type . ' content on assigned domains', $account) && $manager->checkEntityAccess($node, $account)) {
        return AccessResult::allowed()->cachePerPermissions()->cachePerUser()->cacheUntilEntityChanges($node);
      }
      if ($account->hasPermission('edit domain content', $account) && $manager->checkEntityAccess($node, $account)) {
        return AccessResult::allowed()->cachePerPermissions()->cachePerUser()->cacheUntilEntityChanges($node);
      }

    case 'delete':
      if ($account->hasPermission('delete ' . $type . ' content on assigned domains', $account) && $manager->checkEntityAccess($node, $account)) {
        return AccessResult::allowed()->cachePerPermissions()->cachePerUser()->cacheUntilEntityChanges($node);
      }
      if ($account->hasPermission('delete domain content', $account) && $manager->checkEntityAccess($node, $account)) {
        return AccessResult::allowed()->cachePerPermissions()->cachePerUser()->cacheUntilEntityChanges($node);
      }

    default:
      // No opinion.
      return AccessResult::neutral();
  }
}

/**
 * Implements hook_node_create_access().
 *
 * @link https://www.drupal.org/node/2348203
 */
function domain_access_node_create_access(AccountInterface $account, $context, $entity_bundle) {
  // Check to see that we have a valid active domain.
  // Without one, we cannot assert an opinion about access.
  if ($active = \Drupal::service('domain.negotiator')->getActiveDomain()) {
    $id = $active->getDomainId();
  }
  else {
    return AccessResult::neutral();
  }
  // Load the full user record.
  $user = \Drupal::entityManager()->getStorage('user')->load($account->id());
  $user_domains = \Drupal::service('domain_access.manager')->getAccessValues($user);
  if (($account->hasPermission('create ' . $entity_bundle . ' content on assigned domains', $account)
      || $account->hasPermission('create domain content', $account))
      && in_array($id, $user_domains)) {
    // Note the cache context here!
    return AccessResult::allowed()->addCacheContexts(['user.permissions', 'url.site']);
  }
  // No opinion.
  return AccessResult::neutral();
}

/**
 * Implements hook_form_node_form_alter().
 *
 * Hides fields that the user cannot access.
 */
function domain_access_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $account = \Drupal::currentUser();
  if (isset($form[DOMAIN_ACCESS_FIELD])) {
    $form[DOMAIN_ACCESS_FIELD]['#access'] = ($account->hasPermission('publish to any domain') || $account->hasPermission('publish to any assigned domain'));
  }
  if (isset($form[DOMAIN_ACCESS_ALL_FIELD])) {
    $form[DOMAIN_ACCESS_ALL_FIELD]['#access'] = $account->hasPermission('publish to any domain');
  }
}

/**
 * Implements hook_form_user_form_alter().
 *
 * Hides fields that the user cannot access.
 */
function domain_access_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $account = \Drupal::currentUser();
  if (isset($form[DOMAIN_ACCESS_FIELD])) {
    $form[DOMAIN_ACCESS_FIELD]['#access'] = ($account->hasPermission('assign domain editors') || $account->hasPermission('assign editors to any domain'));
  }
  if (isset($form[DOMAIN_ACCESS_ALL_FIELD])) {
    $form[DOMAIN_ACCESS_ALL_FIELD]['#access'] = $account->hasPermission('assign editors to any domain');
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * Creates our fields when new node types are created.
 */
function domain_access_node_type_insert(EntityInterface $entity) {
  domain_access_confirm_fields('node', $entity->id());
}

/**
 * Creates our fields for an entity bundle.
 *
 * @param $entity_type
 *   The entity type being created. Node and user are supported.
 * @param $bundle
 *   The bundle being created.
 *
 * @see domain_access_node_type_insert()
 * @see domain_access_install()
 */
function domain_access_confirm_fields($entity_type, $bundle) {
  $text = [
    'node' => [
      'type' => 'content',
      'label' => 'Send to all affiliates',
      'description' => 'Make this content available on all domains.',
    ],
    'user' => [
      'type' => 'user',
      'label' => 'Editor for all affiliates',
      'description' => 'Make this user an editor on all domains.',
    ]
  ];

  //Allow users to manage other entities
  $moduleHandler = Drupal::moduleHandler();
  $moduleHandler->alter('domain_access_confirm_fields', $text);

  $id = $entity_type . '.' . $bundle . '.' . DOMAIN_ACCESS_FIELD;

  if (!$field = \Drupal::entityManager()->getStorage('field_config')->load($id)) {
    $field = array(
      'field_name' => DOMAIN_ACCESS_FIELD,
      'entity_type' => $entity_type,
      'label' => 'Domain Access',
      'bundle' => $bundle,
      'required' => TRUE,
      'description' => 'Select the affiliate domain(s) for this ' . $text[$entity_type]['type'],
      'default_value_callback' => 'Drupal\domain_access\DomainAccessManager::getDefaultValue',
      'settings' => array(
        'handler_settings' => array(
          'sort' => array('field' => 'weight', 'direction' => 'ASC'),
        ),
      ),
    );
    $field_config = \Drupal::entityManager()->getStorage('field_config')->create($field);
    $field_config->save();

  }
  // Assign the all affiliates field to nodes.
  $id = $entity_type . '.' . $bundle . '.' . DOMAIN_ACCESS_ALL_FIELD;
  if (!$field = \Drupal::entityManager()->getStorage('field_config')->load($id)) {
    $field = array(
      'field_name' => DOMAIN_ACCESS_ALL_FIELD,
      'entity_type' => $entity_type,
      'label' => $text[$entity_type]['label'],
      'bundle' => $bundle,
      'required' => FALSE,
      'description' => $text[$entity_type]['description'],
      'default_value_callback' => 'Drupal\domain_access\DomainAccessManager::getDefaultAllValue',
    );
    $field_config = \Drupal::entityManager()->getStorage('field_config')->create($field);
    $field_config->save();
  }
  // Tell the form system how to behave. Default to radio buttons.
  // @TODO: This function is deprecated, but using the OO syntax is causing
  // test fails.
  entity_get_form_display($entity_type, $bundle, 'default')
    ->setComponent(DOMAIN_ACCESS_FIELD, array(
      'type' => 'options_buttons',
      'weight' => 40,
    ))
    ->setComponent(DOMAIN_ACCESS_ALL_FIELD, array(
      'type' => 'boolean_checkbox',
      'settings' => array('display_label' => 1),
      'weight' => 41,
    ))
    ->save();
}

/**
 * Implements hook_views_data_alter().
 */
function domain_access_views_data_alter(array &$data) {
  $table = 'node__' . DOMAIN_ACCESS_FIELD;
  $data[$table][DOMAIN_ACCESS_FIELD]['field']['id'] = 'domain_access_field';
  $data[$table][DOMAIN_ACCESS_FIELD . '_target_id']['filter']['id'] = 'domain_access_filter';
  $data[$table][DOMAIN_ACCESS_FIELD . '_target_id']['argument']['id'] = 'domain_access_argument';

  // Current domain filter.
  $data[$table]['current_all'] = array(
    'title' => t('Current domain'),
    'group' => t('Domain'),
    'filter' => array(
      'field' => DOMAIN_ACCESS_FIELD . '_target_id',
      'id' => 'domain_access_current_all_filter',
      'title' => t('Available on current domain'),
      'help' => t('Filters out nodes not available on current domain (published to current domain or all affiliates).'),
    ),
  );

  $table = 'user__' . DOMAIN_ACCESS_FIELD;
  $data[$table][DOMAIN_ACCESS_FIELD]['field']['id'] = 'domain_access_field';
  $data[$table][DOMAIN_ACCESS_FIELD . '_target_id']['filter']['id'] = 'domain_access_filter';
  $data[$table][DOMAIN_ACCESS_FIELD . '_target_id']['argument']['id'] = 'domain_access_argument';
}

/**
 * Implements hook_ENTITY_TYPE_insert() fpr domain entities.
 */
function domain_access_domain_insert($entity) {
  $id = 'domain_access_add_action.' . $entity->id();
  if (!entity_load('action', $id)) {
    $action = entity_create('action', array(
      'id' => $id,
      'type' => 'node',
      'label' => t('Add selected content to the @label domain', array('@label' => $entity->label())),
      'configuration' => array(
        'domain_id' => $entity->id(),
      ),
      'plugin' => 'domain_access_add_action',
    ));
    $action->trustData()->save();
  }
  $remove_id = 'domain_access_remove_action.' . $entity->id();
  if (!entity_load('action', $remove_id)) {
    $action = entity_create('action', array(
      'id' => $remove_id,
      'type' => 'node',
      'label' => t('Remove selected content from the @label domain', array('@label' => $entity->label())),
      'configuration' => array(
        'domain_id' => $entity->id(),
      ),
      'plugin' => 'domain_access_remove_action',
    ));
    $action->trustData()->save();
  }
  $id = 'domain_access_add_editor_action.' . $entity->id();
  if (!entity_load('action', $id)) {
    $action = entity_create('action', array(
      'id' => $id,
      'type' => 'user',
      'label' => t('Add editors to the @label domain', array('@label' => $entity->label())),
      'configuration' => array(
        'domain_id' => $entity->id(),
      ),
      'plugin' => 'domain_access_add_editor_action',
    ));
    $action->trustData()->save();
  }
  $remove_id = 'domain_access_remove_editor_action.' . $entity->id();
  if (!entity_load('action', $remove_id)) {
    $action = entity_create('action', array(
      'id' => $remove_id,
      'type' => 'user',
      'label' => t('Remove editors from the @label domain', array('@label' => $entity->label())),
      'configuration' => array(
        'domain_id' => $entity->id(),
      ),
      'plugin' => 'domain_access_remove_editor_action',
    ));
    $action->trustData()->save();
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete() for domain entities.
 */
function domain_access_domain_delete(EntityInterface $entity) {
  $actions = entity_load_multiple('action', array(
    'domain_access_add_action.' . $entity->id(),
    'domain_access_remove_action.' . $entity->id(),
    'domain_access_add_editor_action.' . $entity->id(),
    'domain_access_remove_editor_action.' . $entity->id(),
  ));
  foreach ($actions as $action) {
    $action->delete();
  }
}
