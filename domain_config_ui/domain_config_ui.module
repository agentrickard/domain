<?php
/**
 * @file
 * Allows saving of domain specific configuration through the UI.
 */

use Drupal\Core\Form\FormBuilder;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\EventSubscriber\MainContentViewSubscriber;

/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function domain_config_ui_form_alter(&$form, FormStateInterface $form_state) {
  // Only alter config forms.
  if (!($form_state->getFormObject() instanceof ConfigFormBase)) {
    return;
  }

  // Get the current selected domain.
  $selected_domain = \Drupal::service('domain.negotiator')->getSelectedDomain();

  // Add domain switch select field.
  if ($selected_domain) {
    $selected = $selected_domain->id();
  }
  else {
    $selected = $form_state->getValue('config_save_domain');
  }
  $form['config_save_domain'] = array(
    '#type' => 'select',
    '#weight' => -10,
    '#title' => 'Save config for:',
    '#options' => array_merge(['' => 'All Domains'], \Drupal::service('domain.loader')->loadOptionsList()),
    '#default_value' => $selected,
    '#ajax' => array(
      'callback' => 'domain_config_ui_domain_switch_form_callback',
      ''
    ),
  );

  if ($selected_domain) {
    $form['actions']['submit']['#value'] = t('Save configuration for :domain', [':domain' => $selected_domain->label()]);
  }
}

/**
 * AJAX callback to set the current domain.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function domain_config_ui_domain_switch_form_callback($form, FormStateInterface $form_state) {
  // Switch the current domain.
  \Drupal::service('domain.negotiator')->setSelectedDomain($form_state->getValue('config_save_domain'));

  // Extract requesting page URI from ajax URI.
  // Copied from Drupal\Core\Form\FormBuilder::buildFormAction().
  $request_uri = \Drupal::service('request_stack')->getMasterRequest()->getRequestUri();
  // Prevent cross site requests via the Form API by using an absolute URL
  // when the request uri starts with multiple slashes.
  if (strpos($request_uri, '//') === 0) {
    $request_uri = $request->getUri();
  }
  $parsed = UrlHelper::parse($request_uri);
  unset($parsed['query']['ajax_form'], $parsed['query'][MainContentViewSubscriber::WRAPPER_FORMAT]);
  $request_uri = $parsed['path'] . ($parsed['query'] ? ('?' . UrlHelper::buildQuery($parsed['query'])) : '');

  // Reload the page to get new form values.
  $response = new AjaxResponse();
  $response->addCommand(new RedirectCommand($request_uri));
  return $response;
}
