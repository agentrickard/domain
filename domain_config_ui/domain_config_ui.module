<?php
/**
 * @file
 * Allows saving of domain specific configuration through the UI.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function domain_config_ui_form_alter(&$form, FormStateInterface $form_state) {
  // Only alter config forms that can have a config factory and are on an admin path.
  $route = \Drupal::routeMatch()->getRouteObject();
  $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);
  if (!$is_admin || !domain_config_ui_form_is_allowed($form)) {
    return;
  }

  // Get the current selected domain.
  $selected_domain = \Drupal::service('domain.negotiator')->getSelectedDomain();

  // Add domain switch select field.
  if ($selected_domain) {
    $selected = $selected_domain->id();
  }
  else {
    $selected = $form_state->getValue('config_save_domain');
  }
  $form['config_save_domain'] = array(
    '#type' => 'select',
    '#weight' => -10,
    '#title' => 'Domain',
    '#options' => array_merge(['' => 'All Domains'], \Drupal::service('domain.loader')->loadOptionsList()),
    '#default_value' => $selected,
    '#ajax' => array(
      'callback' => 'domain_config_ui_domain_switch_form_callback',
      ''
    ),
  );

  // Add a message below the form to remind the administrator which domain they are currently configuring.
  if ($selected_domain) {
    $message = new TranslatableMarkup('Configuration will be saved for @domain', array(
      '@domain' => $selected_domain->label(),
    ));
    $form['domain_message'] = array(
      '#markup' => new FormattableMarkup('<div class="messages messages--warning">@message</div>', array(
        '@message' => $message,
      )),
      '#weight' => 1000,
    );
  }
}

/**
 * Checks if provided form can be used to save domain specic configuration.
 *
 * @param array $form
 * @return boolean
 */
function domain_config_ui_form_is_allowed($form) {
  $allowed = array(
    'system_site_information_settings',
    'system_themes_admin_form',
  );
  \Drupal::moduleHandler()->alter('domain_config_form_allowed', $allowed);
  return in_array($form['#form_id'], $allowed);
}

/**
 * AJAX callback to set the current domain.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 */
function domain_config_ui_domain_switch_form_callback($form, FormStateInterface $form_state) {
  // Switch the current domain.
  \Drupal::service('domain.negotiator')->setSelectedDomain($form_state->getValue('config_save_domain'));

  // Reset form with selected domain configuration.
  $form_state->setUserInput([]);
  $new_form = \Drupal::formBuilder()->rebuildForm($form['#form_id'], $form_state, $form);
  $response = new AjaxResponse();
  $response->addCommand(new ReplaceCommand('.' . str_replace('_', '-', $form['#form_id']), $new_form));
  return $response;
}
